//require('dotenv').config({silent: true});
import React from 'react';
import TextField from 'material-ui/TextField';
import SelectField from 'material-ui/SelectField';
import MenuItem from 'material-ui/MenuItem';
import Menu from 'material-ui/Menu';
import Menu1 from "../../components/menu/materialMenu";
//import { ValidatorForm, TextValidator} from 'react-material-ui-form-validator';
import {
  Step,
  Stepper,
  StepButton,
} from 'material-ui/Stepper';
import RaisedButton from 'material-ui/RaisedButton';
import FlatButton from 'material-ui/FlatButton';
import ExpandTransition from 'material-ui/internal/ExpandTransition';
//import { ValidatorForm, TextValidator} from 'react-material-ui-form-validator';
import DropDownMenu from 'material-ui/DropDownMenu';
import {Card, CardActions, CardHeader, CardMedia, CardTitle, CardText} from 'material-ui/Card';
import Paper from 'material-ui/Paper';
import {
  post,
  handleResponseError,
  convertJSON,
  Loader,
  capitalize
} from "../../utils";
import config from '../../templates/def_config.json';
import { Route } from "react-router-dom";


const getStyles = () => {
  return {
    root: {
      width: '100%',
      maxWidth: 1300,
      margin: 'auto',
    },
    content: {
      margin: '0 16px',
    },
    actions: {
      marginTop: 12,
    },
    backButton: {
      marginRight: 12,
    },
  };
};


const MenuData = {

      "styles": {
        "style": "Menu"
      },
      "menuType": "menucollapser",
      "position": "left-aligned",
      "data": {
        "menuHeading": "Alti Menu",
        "menuItems": [{"link":"/view/remitter","anchorText":"Remitter","icon":"ContentInbox","url":"http://192.168.91.51:8012/api/remitter"},{"link":"/view/transactioninfo","anchorText":"Transaction Info","icon":"ActionGrade","url":"http://192.168.91.51:8012/api/transactioninfo"},{"link":"/view/beneficiary","anchorText":"Beneficiary","icon":"ContentSend","url":"http://192.168.91.51:8012/api/beneficiary"}]
      },
      "Template": {
        "name": ""
      }
    }

 //const { MenuContext: { data: { menuItems } } } = this.MenuData.data.menuItems;

const menuItems = [{"link":"/view/admin/scm","anchorText":"Add SCM","icon":"","url":""},{"link":"/view/admin/cicd","anchorText":"CICD","icon":"","url":""},{"link":"/view/admin/deployment","anchorText":"Deployment","icon":"","url":""}];
const style = {
  height: 200,
  width: 800,
  margin: 10,
  textAlign: 'left',
  display: 'block',
};
const menu_style = {
  display: 'inline-block',
  margin: '1px 8px 4px 0',
};


const buttonstyle = {
  margin: 12,
};

const scmvalid = false;

const scmAdd = false;


class AdminMenu extends React.Component {

state = {
  userName:'',
  projectName:'',
  selectValue:''
}

handleChange = (event, index, value) => this.setState({selectValue: value});




renderRoutes(expand) {
    //const { MenuContext: { data: { menuItems } } } = this.props;
    const routes = menuItems.map(({ url, link }, index) => {
      return (
        <Route
          path=""
          key={index}
          render={({ match: { params } }) => {
            return (
              <div></div>
            );
          }}
        />
      );
    });


    return routes.concat([
      <Route
        path="/view/admin/scm"
        key={routes.length}
        render={() => {
          return (
            <div><SCM /></div>
          );
        }}
      />,
      <Route
        path="/view/admin/cicd"        
        key="cicd"
        render={() => {
          return (
            <div><CICD /></div>
          );
        }}
       
      />,      
      <Route
        path="/view/admin/deployment"                
        key="deployment"
        render={() => {
          return (
            <div><Deployment /></div>
          );
        }}
      />
    ]);
  }


render(){
return(<div>
   <div
            style={{
              display: "inline-block",
              width: "25%",
              verticalAlign: "top"
            }}
          >
            <Paper style={{ height: "100vh", overflow: "hidden" }}
            >
              <Menu1 style={{ textAlign: "left" }} menuItems={menuItems} />
            </Paper>
          </div>
          <div
            style={{
              display: "inline-block",
              width: "74%",
              marginLeft: "1%",
              verticalAlign: "top"
            }}
          >
             {this.renderRoutes(true)}
          </div>
     
  </div>);
  }
}


export default class Admin extends React.Component  {


  
state = {
    stepIndex: null,
    disable: true,
    visited: [],
    value:1,
    SCM_Name:1,
    SCM_gitlink:"",
    SCM_AuthType:1,
    SCM_Creds:"",
    SCM_repo:"",
    CI_type:1,
    CI_Link:"",
    CI_uptype:1,
    CI_Arty:"",
    CI_rele:"",
    CI_snap:"",
    DeployData:"",
    SCM:{
      "Name": 1,
      "Link":"",
      "repoBranch": 1,
      "authType": 1,
      "CredentialID": ""
    },
    buildtoolval:1,
    scmone:1,
    scmtwo:1,
    scmthree:"",
    cicdone:1,
    cicdtwo:2,
    cicdthree:"",
    dockerone:1,
    dockertwo:2,
    dockerthree:"",
    scnfour:1,
    scmfive:1,
    scmAdd:true,
  };



  componentWillMount() {
    const {stepIndex, visited} = this.state;
    this.setState({visited: visited.concat(stepIndex)});
  }

  componentWillUpdate(nextProps, nextState) {
    const {stepIndex, visited} = nextState;
    if (visited.indexOf(stepIndex) === -1) {
      this.setState({visited: visited.concat(stepIndex)});
    }
  }

  handleNext = () => {
    const {stepIndex} = this.state;
    if (stepIndex < 3) {
      this.setState({stepIndex: stepIndex + 1});
    }
  };

 // handleChangebuild = (event, index, value) => this.setState({value});

 // handleChangebuildtool = (event, index, buildtoolval) => this.setState({buildtoolval});


  handlePrev = () => {
    const {stepIndex} = this.state;
    if (stepIndex > 0) {
      this.setState({stepIndex: stepIndex - 1});
    }
  };

handleChange = (event, index, values) => this.setState({values});

handleChangebuild = (event, index, value) => this.setState({SCM_Name:value}); 

handleChangeAuth = (event, index, value) => this.setState({SCM_AuthType:value});

handleChangebuildtype = (event, index, value) => this.setState({scmtwo:value});

handleChangeAuthType = (event, index, value) => this.setState({CI_uptype:value});

handleChangeCIType = (event, index, value) => this.setState({CI_type:value});
 

  render() {
    const {stepIndex, visited} = this.state;
    const styles = getStyles();
    return (
       
     <div>
        <AdminMenu />
        </div>
        
    );
    }
}

//Indiividual components of menu


class SCM extends React.Component {

  constructor(props) {
  super(props);
  this.state = {
     stepIndex: null,
    disable: true,
    visited: [],
    value:1,
    SCM_Name:1,
    SCM_gitlink:"",
    SCM_AuthType:1,
    SCM_Creds:"",
    SCM_DYNACRED:"",
    SCM_repo:"",
    creddata:[],
    credData11:[],
  };
   this.fetchCreds = this.fetchCreds.bind(this);
   this.handleAuth = this.handleAuth.bind(this);
}

componentWillMount() {
   const creds =  this.fetchCreds();
   console.log("creds are ..."+creds);
}

validateSCMdtls = () =>{

const valid = 'validateScm'
		//alert("url is...111"+process.env);
		//alert("url is..."+process.env.API_URLS);
		//alert("url is..."+process.env.REACT_APP_API_URLS);
        var url = process.env.REACT_APP_API_URLS+'/'+valid;
  fetch(url, {
  method: 'POST',
  headers: {
    'Accept': 'application/json',
    'Content-Type': 'application/json',
  },
  body: JSON.stringify({
        "Name": this.state.SCM_Name,
        "Link": this.state.SCM_gitlink,
        "repoBranch": this.state.SCM_repo,
        "authType": this.state.SCM_AuthType,
        "CredentialID": this.state.SCM_DYNACRED
        }),
}).then(function(response) {
   // return response.json();
   console.log("status is ..."+response.status);
  }).then(function(data) {
   // ChromeSamples.log('Created Gist:', data.html_url);
   console.log("data is..."+data);
  });


}


addSCMdtls = () =>{


const getScm = 'getOneScm'
		//alert("url is...111"+process.env);
		//alert("url is..."+process.env.API_URLS);
		//alert("url is..."+process.env.REACT_APP_API_URLS);
        var url = process.env.REACT_APP_API_URLS+'/'+getScm;
  fetch(url, {
  method: 'POST',
  headers: {
    'Accept': 'application/json',
    'Content-Type': 'application/json',
  },
  body: JSON.stringify({
        "Name": this.state.SCM_Name,
        "Link": this.state.SCM_gitlink,
        "repoBranch": this.state.SCM_repo,
        "authType": this.state.SCM_AuthType,
        "CredentialID": this.state.SCM_DYNACRED
        }),
}).then(function(response) {
   // return response.json();
   console.log("status is ..."+response.status);
  }).then(function(data) {
   // ChromeSamples.log('Created Gist:', data.html_url);
   console.log("data is..."+data);
  });


}



fetchCreds = () =>{
		const getcred = 'getAllCredentials'
		//alert("url is...111"+process.env);
		//alert("url is..."+process.env.API_URLS);
		//alert("url is..."+process.env.REACT_APP_API_URLS);
        var url = process.env.REACT_APP_API_URLS+'/'+getcred;
        fetch(url, {
          headers: {
            'Content-Type': 'application/json'
          }
        })
         .then( (response) => {
            return response.json()
         })
         .then( (json) => {
          this.setState({
            creddata : json.result
          })
            console.log('parsed json', json)
         })
         .catch( (ex) => {
            console.log('parsing failed', ex)
         })
  }

handleChangebuild = (event, index, value) => this.setState({SCM_Name:value}); 

handleChangeAuth = (event, index, value) => this.setState({SCM_AuthType:value});

handleCredChange = (event, index, value) => this.setState({SCM_DYNACRED:value});

handleAuth = () =>{

  const aie = this.state.SCM_AuthType;

  const data555 =[];

  { 
    this.state.creddata.map((obj) => {
                                    if (obj.type === aie) {

                                      data555.push(obj.credentialName)
                                       
                                    }
                                  })}

    this.setState({credData11:data555})
}
render(){

return(<div>
  <Card>
          <DropDownMenu value={this.state.SCM_Name} onChange={this.handleChangebuild}  style={{marginTop: 0, width:'100%',maxWidth:700}}>
           <MenuItem value={1} disabled primaryText="Select Type" />
          <MenuItem value={"git"} primaryText="Github" />
          <MenuItem value={3} disabled primaryText="Gitlab" />
          <MenuItem value={4} disabled primaryText="SVN" />
          </DropDownMenu>
          <br/>
          <TextField  value={this.state.SCM_gitlink}   onChange={(e, newValue) => this.setState({ SCM_gitlink: newValue})} style={{marginTop: 0, marginLeft: 20,width:'100%',maxWidth:700}} floatingLabelText="Github Link" />
          <br/>
          <TextField  value={this.state.SCM_repo}   onChange={(e, newValue) => this.setState({ SCM_repo: newValue})} style={{marginTop: 0, marginLeft: 20,width:'100%',maxWidth:700}} floatingLabelText="Repo Branch" />
          <br/>
          <DropDownMenu value={this.state.SCM_AuthType}  onChange={this.handleChangeAuth}  style={{marginTop: 0, width:'100%',maxWidth:700 }}>
          <MenuItem value={"1"} disabled primaryText="Select Type" />
          <MenuItem value={"up"} primaryText="Hostname with Username & Password" />
          <MenuItem value={"ups"} primaryText="Host with SSH Key" />
          <MenuItem value={"upss"} primaryText="SecretText" />
          </DropDownMenu>
          <br/>
          <SelectField  style={{marginTop: 0, marginLeft: 20,width:'100%',maxWidth:700}}
                                name="formField" 
                                floatingLabelText="Credentials"
                                value={this.state.SCM_DYNACRED} 
                                onClick = {this.handleAuth}
                                onChange={this.handleCredChange} >
                                {this.state.credData11.map((obj) => {
                                    if (obj) {
                                        return ( <MenuItem 
                                            value={obj} 
                                            key={this.state.credData11.indexOf(obj)} 
                                            primaryText={obj}/>)
                                    }})}
                            </SelectField>
            
          <div>
    <RaisedButton label="Validate" primary={true} style={buttonstyle} disabled ={this.scmvalid}  onClick={this.validateSCMdtls} />
    <RaisedButton label="Add" primary={true} style={buttonstyle}  disabled={this.state.scmAdd} onClick={this.addSCMdtls} /></div>
    </Card>
  </div>);
  }
}

class CICD extends React.Component {


state = {
    stepIndex: null,
    disable: true,
    visited: [],
    value:1,
    CI_type:1,
    CI_Link:"",
    CI_uptype:1,
    CI_Arty:"",
    CI_rele:"",
    CI_snap:"",
    DeployData:"",
  };


handleChangeAuthType = (event, index, value) => this.setState({CI_uptype:value});

handleChangeCIType = (event, index, value) => this.setState({CI_type:value});


render(){
  
return(<div>
   <Card>
          <DropDownMenu value={this.state.CI_type} onChange={this.handleChangeCIType}  style={{marginTop: 0, width:'100%',maxWidth:700}}>
           <MenuItem value={1} disabled primaryText="Select Type" />
          <MenuItem value={2} primaryText="Jenkins" />
          </DropDownMenu>
          <br/>
          <TextField  value={this.state.CI_Link}   onChange={(e, newValue) => this.setState({ CI_Link: newValue})} style={{marginTop: 0, marginLeft: 20,width:'100%',maxWidth:700}} floatingLabelText="Link" />
          <br/>
          <DropDownMenu value={this.state.CI_uptype}  onChange={this.handleChangeAuthType}  style={{marginTop: 0, width:'100%',maxWidth:700 }}>
          <MenuItem value={1} disabled primaryText="Select Type" />
          <MenuItem value={2} primaryText="Hostname with Username & Password" />
          <MenuItem value={3} primaryText="Host with SSH Key" />
          <MenuItem value={4} primaryText="SecretText" />
          </DropDownMenu>
          <br />
          <TextField  value={this.state.CI_Arty}   onChange={(e, newValue) => this.setState({ CI_Arty: newValue})} style={{marginTop: 0, marginLeft: 20,width:'100%',maxWidth:700}} floatingLabelText="Articraft URL" />
          <br/>
           <TextField  value={this.state.CI_rele}   onChange={(e, newValue) => this.setState({ CI_rele: newValue})} style={{marginTop: 0, marginLeft: 20,width:'100%',maxWidth:700}} floatingLabelText="target release syntax" />
            <TextField  value={this.state.CI_snap}   onChange={(e, newValue) => this.setState({ CI_snap: newValue})} style={{marginTop: 0, marginLeft: 20,width:'100%',maxWidth:700}} floatingLabelText="target snapshort syntax" />
          <br/>
              <div>
    <RaisedButton label="Validate" primary={true} style={buttonstyle} disabled ={this.scmvalid}  onClick={this.validateSCMdtls} />
    <RaisedButton label="Add" primary={true} style={buttonstyle}  disabled={this.state.scmAdd} onClick={this.addSCM} /></div>
    </Card>
     
  </div>);
  }
}


class Deployment extends React.Component {

state = {
    stepIndex: null,
    disable: true,
    visited: [],
    DEP_deploy:1,
    DEP_AuthType:1,
    DEP_cred:1,
    DEP_depserver:"",
    DEP_AppNumber:"",
    DEP_DockerExposedNumber:"",
    DEP_RegService:"",
    DEP_RegistryNumber:"",
    DeployData:"",
  
  };


handleDeployType = (event, index, value) => this.setState({DEP_deploy:value});

handleChangeAuthType = (event, index, value) => this.setState({DEP_AuthType:value});

handleChangeCred = (event, index, value) => this.setState({DEP_cred:value});


render(){
 
return(<div>
   <Card>
          <br/>
           <DropDownMenu value={this.state.DEP_deploy} onChange={this.handleDeployType}  style={{marginTop: 0, width:'100%',maxWidth:700}}>
           <MenuItem value={1} disabled primaryText="Select Type" />
          <MenuItem value={2} primaryText="Docker" />
          </DropDownMenu>
           <DropDownMenu value={this.state.DEP_AuthType}  onChange={this.handleChangeAuthType}  style={{marginTop: 0, width:'100%',maxWidth:700 }}>
          <MenuItem value={1} disabled primaryText="Select Type" />
          <MenuItem value={2} primaryText="Hostname with Username & Password" />
          <MenuItem value={3} primaryText="Host with SSH Key" />
          <MenuItem value={4} primaryText="SecretText" />
          </DropDownMenu>
           <DropDownMenu value={this.state.DEP_cred} onChange={this.handleChangeCred}  style={{marginTop: 0, width:'100%',maxWidth:700}}>
           <MenuItem value={1} disabled primaryText="Select Type" />
          <MenuItem value={2} primaryText="" />
          </DropDownMenu>
          <br/>
          
          <TextField   value={this.state.DEP_depserver}   onChange={(e, newValue) => this.setState({ DEP_depserver: newValue})}   style={{marginTop: 0, marginLeft: 20,width:'100%',maxWidth:700}} floatingLabelText="Deployment Server" />
          <br/>
          <br/>
          <TextField  value={this.state.DEP_AppNumber}   onChange={(e, newValue) => this.setState({ DEP_AppNumber: newValue})}    style={{marginTop: 0, marginLeft: 20,width:'100%',maxWidth:700}} floatingLabelText="App Port Number" />
          <TextField  value={this.state.DEP_DockerExposedNumber}   onChange={(e, newValue) => this.setState({ DEP_DockerExposedNumber: newValue})}  style={{marginTop: 0, marginLeft: 20,width:'100%',maxWidth:700}} floatingLabelText="Docker Exposed Port Number" />

          <TextField  value={this.state.DEP_RegService}   onChange={(e, newValue) => this.setState({ DEP_RegService: newValue})}  style={{marginTop: 0, marginLeft: 20,width:'100%',maxWidth:700}} floatingLabelText="Registry Server" />
          <TextField  value={this.state.DEP_RegistryNumber}   onChange={(e, newValue) => this.setState({ DEP_RegistryNumber: newValue})} style={{marginTop: 0, marginLeft: 20,width:'100%',maxWidth:700}} floatingLabelText="Docker Registry Port Number" />
          <br/>
         <label style={{marginTop: 0, marginLeft: 360,width:'100%',maxWidth:700,fontWeight: "bold"}}>Bash</label>
          <br/>
          
          <textarea  value={this.state.DeployData} rows = "3" onChange={(e, newValue) => this.setState({ DeployData: newValue})} placeholder="" style={{marginTop: 0, marginLeft: 20,width:'100%',maxWidth:700}}></textarea>
          <br/> 
              <div>
    <RaisedButton label="Validate" primary={true} style={buttonstyle} disabled ={this.scmvalid}  onClick={this.validateSCMdtls} />
    <RaisedButton label="Add" primary={true} style={buttonstyle}  disabled={this.state.scmAdd} onClick={this.addSCM} /></div>
    </Card>
     
  </div>);
  }
}




